// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	DiskStatus
	CpuStatus
	RamStatus
	NetStatus
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DiskStatus struct {
	Diskstat string `protobuf:"bytes,1,opt,name=diskstat" json:"diskstat,omitempty"`
}

func (m *DiskStatus) Reset()                    { *m = DiskStatus{} }
func (m *DiskStatus) String() string            { return proto.CompactTextString(m) }
func (*DiskStatus) ProtoMessage()               {}
func (*DiskStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DiskStatus) GetDiskstat() string {
	if m != nil {
		return m.Diskstat
	}
	return ""
}

type CpuStatus struct {
	Cpustat string `protobuf:"bytes,1,opt,name=cpustat" json:"cpustat,omitempty"`
}

func (m *CpuStatus) Reset()                    { *m = CpuStatus{} }
func (m *CpuStatus) String() string            { return proto.CompactTextString(m) }
func (*CpuStatus) ProtoMessage()               {}
func (*CpuStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CpuStatus) GetCpustat() string {
	if m != nil {
		return m.Cpustat
	}
	return ""
}

type RamStatus struct {
	Ramstat string `protobuf:"bytes,1,opt,name=ramstat" json:"ramstat,omitempty"`
}

func (m *RamStatus) Reset()                    { *m = RamStatus{} }
func (m *RamStatus) String() string            { return proto.CompactTextString(m) }
func (*RamStatus) ProtoMessage()               {}
func (*RamStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RamStatus) GetRamstat() string {
	if m != nil {
		return m.Ramstat
	}
	return ""
}

type NetStatus struct {
	Netstat string `protobuf:"bytes,1,opt,name=netstat" json:"netstat,omitempty"`
}

func (m *NetStatus) Reset()                    { *m = NetStatus{} }
func (m *NetStatus) String() string            { return proto.CompactTextString(m) }
func (*NetStatus) ProtoMessage()               {}
func (*NetStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NetStatus) GetNetstat() string {
	if m != nil {
		return m.Netstat
	}
	return ""
}

func init() {
	proto.RegisterType((*DiskStatus)(nil), "api.DiskStatus")
	proto.RegisterType((*CpuStatus)(nil), "api.CpuStatus")
	proto.RegisterType((*RamStatus)(nil), "api.RamStatus")
	proto.RegisterType((*NetStatus)(nil), "api.NetStatus")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for InfoStatus service

type InfoStatusClient interface {
	GetDiskStats(ctx context.Context, in *DiskStatus, opts ...grpc.CallOption) (*DiskStatus, error)
	GetCpuStats(ctx context.Context, in *CpuStatus, opts ...grpc.CallOption) (*CpuStatus, error)
	GetRamStats(ctx context.Context, in *RamStatus, opts ...grpc.CallOption) (*RamStatus, error)
	GetNetStats(ctx context.Context, in *NetStatus, opts ...grpc.CallOption) (*NetStatus, error)
}

type infoStatusClient struct {
	cc *grpc.ClientConn
}

func NewInfoStatusClient(cc *grpc.ClientConn) InfoStatusClient {
	return &infoStatusClient{cc}
}

func (c *infoStatusClient) GetDiskStats(ctx context.Context, in *DiskStatus, opts ...grpc.CallOption) (*DiskStatus, error) {
	out := new(DiskStatus)
	err := grpc.Invoke(ctx, "/api.InfoStatus/GetDiskStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoStatusClient) GetCpuStats(ctx context.Context, in *CpuStatus, opts ...grpc.CallOption) (*CpuStatus, error) {
	out := new(CpuStatus)
	err := grpc.Invoke(ctx, "/api.InfoStatus/GetCpuStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoStatusClient) GetRamStats(ctx context.Context, in *RamStatus, opts ...grpc.CallOption) (*RamStatus, error) {
	out := new(RamStatus)
	err := grpc.Invoke(ctx, "/api.InfoStatus/GetRamStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoStatusClient) GetNetStats(ctx context.Context, in *NetStatus, opts ...grpc.CallOption) (*NetStatus, error) {
	out := new(NetStatus)
	err := grpc.Invoke(ctx, "/api.InfoStatus/GetNetStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InfoStatus service

type InfoStatusServer interface {
	GetDiskStats(context.Context, *DiskStatus) (*DiskStatus, error)
	GetCpuStats(context.Context, *CpuStatus) (*CpuStatus, error)
	GetRamStats(context.Context, *RamStatus) (*RamStatus, error)
	GetNetStats(context.Context, *NetStatus) (*NetStatus, error)
}

func RegisterInfoStatusServer(s *grpc.Server, srv InfoStatusServer) {
	s.RegisterService(&_InfoStatus_serviceDesc, srv)
}

func _InfoStatus_GetDiskStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoStatusServer).GetDiskStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InfoStatus/GetDiskStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoStatusServer).GetDiskStats(ctx, req.(*DiskStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoStatus_GetCpuStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CpuStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoStatusServer).GetCpuStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InfoStatus/GetCpuStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoStatusServer).GetCpuStats(ctx, req.(*CpuStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoStatus_GetRamStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RamStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoStatusServer).GetRamStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InfoStatus/GetRamStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoStatusServer).GetRamStats(ctx, req.(*RamStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoStatus_GetNetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoStatusServer).GetNetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InfoStatus/GetNetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoStatusServer).GetNetStats(ctx, req.(*NetStatus))
	}
	return interceptor(ctx, in, info, handler)
}

var _InfoStatus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.InfoStatus",
	HandlerType: (*InfoStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDiskStats",
			Handler:    _InfoStatus_GetDiskStats_Handler,
		},
		{
			MethodName: "GetCpuStats",
			Handler:    _InfoStatus_GetCpuStats_Handler,
		},
		{
			MethodName: "GetRamStats",
			Handler:    _InfoStatus_GetRamStats_Handler,
		},
		{
			MethodName: "GetNetStats",
			Handler:    _InfoStatus_GetNetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x41, 0x4a, 0x03, 0x31,
	0x14, 0x86, 0x69, 0xd5, 0xd6, 0x79, 0x56, 0x85, 0xac, 0x4a, 0x70, 0x21, 0x03, 0x42, 0x57, 0x1d,
	0xd0, 0xa5, 0x0b, 0x17, 0x0a, 0xc5, 0x8d, 0x8b, 0x7a, 0x82, 0x67, 0x8d, 0x25, 0x8c, 0x93, 0x84,
	0xc9, 0x9b, 0x0b, 0x88, 0x37, 0xf0, 0x68, 0x5e, 0xc1, 0x83, 0xc8, 0x4c, 0x5f, 0x32, 0x21, 0xcb,
	0x3f, 0x7c, 0x1f, 0xe4, 0x4b, 0xa0, 0x40, 0xa7, 0xd7, 0xae, 0xb5, 0x64, 0xc5, 0x11, 0x3a, 0x2d,
	0xaf, 0xf6, 0xd6, 0xee, 0x3f, 0x55, 0x85, 0x4e, 0x57, 0x68, 0x8c, 0x25, 0x24, 0x6d, 0x8d, 0x3f,
	0x20, 0xe5, 0x0a, 0xe0, 0x49, 0xfb, 0xfa, 0x95, 0x90, 0x3a, 0x2f, 0x24, 0x9c, 0xbe, 0x6b, 0x5f,
	0x7b, 0x42, 0x5a, 0x4e, 0xae, 0x27, 0xab, 0x62, 0x1b, 0x77, 0x79, 0x03, 0xc5, 0xa3, 0xeb, 0x18,
	0x5c, 0xc2, 0x7c, 0xe7, 0xba, 0x84, 0x0b, 0xb3, 0xc7, 0xb6, 0xd8, 0x8c, 0x58, 0x8b, 0x4d, 0x8a,
	0xf1, 0xec, 0xb1, 0x17, 0x45, 0x23, 0x66, 0x14, 0xa5, 0x18, 0xcf, 0xdb, 0xef, 0x29, 0xc0, 0xb3,
	0xf9, 0xb0, 0x0c, 0x3e, 0xc0, 0x62, 0xa3, 0x28, 0x5c, 0xd8, 0x8b, 0xcb, 0x75, 0x1f, 0x3b, 0x06,
	0xc8, 0xfc, 0xa0, 0x3c, 0xff, 0xfa, 0xfd, 0xfb, 0x99, 0xce, 0xc5, 0x49, 0xd5, 0x87, 0x88, 0x7b,
	0x38, 0xdb, 0x28, 0xe2, 0x0e, 0x2f, 0x2e, 0x06, 0x3c, 0x66, 0xc9, 0x6c, 0x97, 0x8b, 0xc1, 0x9e,
	0x89, 0xe3, 0x6a, 0xe7, 0x3a, 0x96, 0xb9, 0x2e, 0xc8, 0x31, 0x56, 0x66, 0x3b, 0x91, 0x5b, 0x6c,
	0x58, 0xe6, 0xe6, 0x20, 0xc7, 0x27, 0x90, 0xd9, 0x4e, 0x64, 0xa3, 0xe8, 0x6d, 0x36, 0x7c, 0xd6,
	0xdd, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x20, 0x71, 0x3c, 0x14, 0xdc, 0x01, 0x00, 0x00,
}
